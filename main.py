from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Updater, CallbackQueryHandler, CallbackContext, CommandHandler
import schedule
import time
import threading
import datetime
import csv
import os
import matplotlib.pyplot as plt
from keep_alive import keep_alive

BOT_TOKEN = '7819786503:AAF5CiALnyVswMxHn51DB2eIJ8taMyLQKPY'
USER_CHAT_ID = 472659403  # —Ç–≤–æ–π chat_id

bot = Bot(token=BOT_TOKEN)
log = {}

# ========== –õ–û–ì–ò ==========
def log_action(name: str, status: str):
    now = datetime.datetime.now()
    filename = "activity_log.csv"
    file_exists = os.path.isfile(filename)
    with open(filename, mode="a", newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        if not file_exists:
            writer.writerow(["–î–∞—Ç–∞", "–í—Ä–µ–º—è", "–î–µ–π—Å—Ç–≤–∏–µ", "–°—Ç–∞—Ç—É—Å"])
        writer.writerow([now.date(), now.time().strftime("%H:%M:%S"), name, status])

# ========== –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ==========
def send_morning_message():
    keyboard = [
        [InlineKeyboardButton("‚úÖ –í—ã–ø–∏–ª!", callback_data='morning_done')],
        [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='morning_skip')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    bot.send_message(chat_id=USER_CHAT_ID, text="üåÖ –í—ã–ø–µ–π —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã –Ω–∞ —Ç–æ—â–∞–∫!", reply_markup=reply_markup)
    log['morning'] = None
    threading.Timer(600, check_morning_response).start()

def send_evening_message():
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ—á–∏—Å—Ç–∏–ª!", callback_data='evening_done')],
        [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='evening_skip')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    bot.send_message(chat_id=USER_CHAT_ID, text="üåô –ü–æ—á–∏—Å—Ç—å –∑—É–±—ã –ø–µ—Ä–µ–¥ —Å–Ω–æ–º!", reply_markup=reply_markup)
    log['evening'] = None
    threading.Timer(600, check_evening_response).start()

def send_lunch_message():
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–æ–±–µ–¥–∞–ª!", callback_data='lunch_done')],
        [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='lunch_skip')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    bot.send_message(chat_id=USER_CHAT_ID, text="üçΩ –í—Ä–µ–º—è –æ–±–µ–¥–∞!", reply_markup=reply_markup)

def send_sleep_message():
    keyboard = [
        [InlineKeyboardButton("‚úÖ –õ—ë–≥ —Å–ø–∞—Ç—å", callback_data='sleep_done')],
        [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='sleep_skip')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    bot.send_message(chat_id=USER_CHAT_ID, text="üõè –ü–æ—Ä–∞ –ª–æ–∂–∏—Ç—å—Å—è —Å–ø–∞—Ç—å!", reply_markup=reply_markup)

def send_end_shift_message():
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ó–∞–∫–æ–Ω—á–∏–ª —Å–º–µ–Ω—É", callback_data='shift_done')],
        [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='shift_skip')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    bot.send_message(chat_id=USER_CHAT_ID, text="üèÅ –°–º–µ–Ω–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞! –ü–æ–¥–≤–µ–¥–∏ –∏—Ç–æ–≥–∏.", reply_markup=reply_markup)

# ========== –ü–†–û–í–ï–†–ö–ê –ù–ï–û–¢–í–ï–ß–ï–ù–ù–´–• ==========
def check_morning_response():
    if log.get('morning') is None:
        bot.send_message(chat_id=USER_CHAT_ID, text="‚è∞ –¢—ã –Ω–µ –Ω–∞–∂–∞–ª ¬´‚úÖ –í—ã–ø–∏–ª!¬ª ‚Äî –Ω–µ –∑–∞–±—É–¥—å –≤—ã–ø–∏—Ç—å –≤–æ–¥—É!")

def check_evening_response():
    if log.get('evening') is None:
        bot.send_message(chat_id=USER_CHAT_ID, text="ü™• –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Ç—ã –Ω–µ –Ω–∞–∂–∞–ª ¬´‚úÖ –ü–æ—á–∏—Å—Ç–∏–ª!¬ª")

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö ==========
def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    now = datetime.datetime.now().strftime("%H:%M:%S")
    data = query.data

    actions = {
        'morning_done': ("–£—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "–≤—ã–ø–æ–ª–Ω–∏–ª"),
        'morning_skip': ("–£—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "–ø—Ä–æ–ø—É—Å—Ç–∏–ª"),
        'evening_done': ("–í–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "–≤—ã–ø–æ–ª–Ω–∏–ª"),
        'evening_skip': ("–í–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "–ø—Ä–æ–ø—É—Å—Ç–∏–ª"),
        'lunch_done': ("–û–±–µ–¥", "–≤—ã–ø–æ–ª–Ω–∏–ª"),
        'lunch_skip': ("–û–±–µ–¥", "–ø—Ä–æ–ø—É—Å—Ç–∏–ª"),
        'sleep_done': ("–°–æ–Ω", "–≤—ã–ø–æ–ª–Ω–∏–ª"),
        'sleep_skip': ("–°–æ–Ω", "–ø—Ä–æ–ø—É—Å—Ç–∏–ª"),
        'shift_done': ("–ö–æ–Ω–µ—Ü —Å–º–µ–Ω—ã", "–≤—ã–ø–æ–ª–Ω–∏–ª"),
        'shift_skip': ("–ö–æ–Ω–µ—Ü —Å–º–µ–Ω—ã", "–ø—Ä–æ–ø—É—Å—Ç–∏–ª"),
    }

    if data in actions:
        name, status = actions[data]
        log_action(name, status)
        query.edit_message_reply_markup(reply_markup=None)
        bot.send_message(chat_id=USER_CHAT_ID, text=f"üìå {name}: {status}")

# ========== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ==========
def generate_statistics():
    filename = "activity_log.csv"
    if not os.path.exists(filename):
        return None
    import pandas as pd
    df = pd.read_csv(filename)
    if df.empty:
        return None
    summary = df.groupby(["–î–µ–π—Å—Ç–≤–∏–µ", "–°—Ç–∞—Ç—É—Å"]).size().unstack(fill_value=0)
    plt.figure(figsize=(10, 6))
    summary.plot(kind="bar", stacked=True, colormap="Set2")
    plt.title("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    plt.xlabel("–î–µ–π—Å—Ç–≤–∏–µ")
    plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    plt.xticks(rotation=30)
    plt.tight_layout()
    path = "statistics.png"
    plt.savefig(path)
    return path

# ========== –ö–û–ú–ê–ù–î–´ ==========
def test_command(update: Update, context: CallbackContext):
    send_morning_message()
    send_evening_message()
    send_lunch_message()
    send_sleep_message()
    send_end_shift_message()

def log_command(update: Update, context: CallbackContext):
    if os.path.isfile("activity_log.csv"):
        with open("activity_log.csv", "rb") as f:
            bot.send_document(chat_id=update.effective_chat.id, document=f)
    else:
        bot.send_message(chat_id=update.effective_chat.id, text="–õ–æ–≥ –ø—É—Å—Ç.")

def stats_command(update: Update, context: CallbackContext):
    path = generate_statistics()
    if path:
        with open(path, "rb") as img:
            bot.send_photo(chat_id=update.effective_chat.id, photo=img)
    else:
        bot.send_message(chat_id=update.effective_chat.id, text="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

# ========== –†–ê–°–ü–ò–°–ê–ù–ò–ï ==========
schedule.every().day.at("07:15").do(send_morning_message)
schedule.every().day.at("21:30").do(send_evening_message)
schedule.every().day.at("22:00").do(send_sleep_message)
schedule.every().day.at("17:00").do(send_end_shift_message)
for day in ['monday', 'tuesday', 'wednesday', 'thursday', 'friday']:
    getattr(schedule.every(), day).at("11:15").do(send_lunch_message)

# ========== –ó–ê–ü–£–°–ö ==========
keep_alive()

# ========== –†–ê–°–ü–ò–°–ê–ù–ò–ï –í–†–ï–ú–ï–ù–ò (UTC, —Ç.–∫. Replit) ==========
schedule.every().day.at("01:15").do(send_morning_message)      # 07:15 –ø–æ –ê–ª–º–∞—Ç—ã
schedule.every().monday.at("05:15").do(send_lunch_reminder)     # 11:15 –ø–æ –ê–ª–º–∞—Ç—ã
schedule.every().tuesday.at("05:15").do(send_lunch_reminder)
schedule.every().wednesday.at("05:15").do(send_lunch_reminder)
schedule.every().thursday.at("05:15").do(send_lunch_reminder)
schedule.every().friday.at("05:15").do(send_lunch_reminder)
schedule.every().day.at("11:00").do(send_end_of_shift_reminder) # 17:00 –ø–æ –ê–ª–º–∞—Ç—ã
schedule.every().day.at("15:30").do(send_evening_message)       # 21:30 –ø–æ –ê–ª–º–∞—Ç—ã
schedule.every().day.at("16:00").do(send_sleep_reminder)        # 22:00 –ø–æ –ê–ª–º–∞—Ç—ã

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ (–æ—Ç–ª–æ–∂–µ–Ω–Ω–∞—è —á–µ—Ä–µ–∑ 10 –º–∏–Ω)
schedule.every().day.at("01:25").do(check_morning_response)     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–¥—ã
schedule.every().day.at("15:40").do(check_evening_response)     # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å—Ç–∫–∏

def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(10)

threading.Thread(target=run_scheduler).start()

updater = Updater(token=BOT_TOKEN, use_context=True)
updater.dispatcher.add_handler(CallbackQueryHandler(button_handler))
updater.dispatcher.add_handler(CommandHandler(["test"], test_command))
updater.dispatcher.add_handler(CommandHandler(["log"], log_command))
updater.dispatcher.add_handler(CommandHandler(["stats"], stats_command))
updater.start_polling()
